/* --------------------------------------------------------------------------

   THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT IT!

----------------------------------------------------------------------------*/

namespace Musicbrainz {
    public class Entity {
        internal Mb4.Entity* instance;
        [CCode (has_target=false)]
        internal delegate void DeleteFunc (Mb4.Entity* entity);
        unowned DeleteFunc? delete_func;
        Gee.HashMap<string, string> _ext_attributes;
        Gee.HashMap<string, string> _ext_elements;
        public Gee.HashMap<string, string> ext_attributes {
            get { return _ext_attributes; }
        }
        public Gee.HashMap<string, string> ext_elements {
            get { return _ext_elements; }
        }
        internal void wrap_helper (Mb4.Entity* entity, DeleteFunc? delete_func) {
            this.instance = entity;
            this.delete_func = delete_func;
            var _ext_attributes_size = instance -> ext_attributes_size ();
            _ext_attributes = new Gee.HashMap<string, string> ();
            for (var i = 0; i < _ext_attributes_size; ++i) {
                var _name = instance -> ext_attribute_name (i);
                var _value = instance -> ext_attribute_value (i);
                _ext_attributes[_name] = _value;
            }
            var _ext_elements_size = instance -> ext_elements_size ();
            _ext_elements = new Gee.HashMap<string, string> ();
            for (var i = 0; i < _ext_elements_size; ++i) {
                var _name = instance -> ext_element_name (i);
                var _value = instance -> ext_element_value (i);
                _ext_elements[_name] = _value;
            }
        }
        internal Entity.wrap (Mb4.Entity* entity, DeleteFunc? delete_func) {
            wrap_helper (entity, delete_func);
        }
        ~Entity () { 
            if (delete_func != null)
                delete_func (instance);
        }
    }
    public class Alias : Entity {
        internal Alias.wrap (Mb4.Alias* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Alias* _obj = (Mb4.Alias*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Alias dup () {
            return new Alias.wrap (new Mb4.Alias.copy ((Mb4.Alias*) instance), false);
        }
        public string locale {
            owned get {
                return ((Mb4.Alias*)instance) -> locale;
            }
        }
        public string text {
            owned get {
                return ((Mb4.Alias*)instance) -> text;
            }
        }
    }
    public class Annotation : Entity {
        internal Annotation.wrap (Mb4.Annotation* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Annotation* _obj = (Mb4.Annotation*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Annotation dup () {
            return new Annotation.wrap (new Mb4.Annotation.copy ((Mb4.Annotation*) instance), false);
        }
        public string entity {
            owned get {
                return ((Mb4.Annotation*)instance) -> entity;
            }
        }
        public string name {
            owned get {
                return ((Mb4.Annotation*)instance) -> name;
            }
        }
        public string text {
            owned get {
                return ((Mb4.Annotation*)instance) -> text;
            }
        }
    }
    public class Artist : Entity {
        internal Artist.wrap (Mb4.Artist* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Artist* _obj = (Mb4.Artist*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Artist dup () {
            return new Artist.wrap (new Mb4.Artist.copy ((Mb4.Artist*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.Artist*)instance) -> id;
            }
        }
        public string name {
            owned get {
                return ((Mb4.Artist*)instance) -> name;
            }
        }
        public string sort_name {
            owned get {
                return ((Mb4.Artist*)instance) -> sort_name;
            }
        }
        public string gender {
            owned get {
                return ((Mb4.Artist*)instance) -> gender;
            }
        }
        public string country {
            owned get {
                return ((Mb4.Artist*)instance) -> country;
            }
        }
        public string disambiguation {
            owned get {
                return ((Mb4.Artist*)instance) -> disambiguation;
            }
        }
        public Lifespan? lifespan {
            owned get {
                unowned Mb4.Lifespan? result = ((Mb4.Artist*)instance) -> lifespan;
                if (result == null) return null;
                return new Lifespan.wrap (result);
            }
        }
        public AliasList? alias_list {
            owned get {
                unowned Mb4.AliasList? result = ((Mb4.Artist*)instance) -> alias_list;
                if (result == null) return null;
                return new AliasList.wrap (result);
            }
        }
        public RecordingList? recording_list {
            owned get {
                unowned Mb4.RecordingList? result = ((Mb4.Artist*)instance) -> recording_list;
                if (result == null) return null;
                return new RecordingList.wrap (result);
            }
        }
        public ReleaseList? release_list {
            owned get {
                unowned Mb4.ReleaseList? result = ((Mb4.Artist*)instance) -> release_list;
                if (result == null) return null;
                return new ReleaseList.wrap (result);
            }
        }
        public ReleaseGroupList? release_group_list {
            owned get {
                unowned Mb4.ReleaseGroupList? result = ((Mb4.Artist*)instance) -> release_group_list;
                if (result == null) return null;
                return new ReleaseGroupList.wrap (result);
            }
        }
        public LabelList? label_list {
            owned get {
                unowned Mb4.LabelList? result = ((Mb4.Artist*)instance) -> label_list;
                if (result == null) return null;
                return new LabelList.wrap (result);
            }
        }
        public WorkList? work_list {
            owned get {
                unowned Mb4.WorkList? result = ((Mb4.Artist*)instance) -> work_list;
                if (result == null) return null;
                return new WorkList.wrap (result);
            }
        }
        public RelationList? relation_list {
            owned get {
                unowned Mb4.RelationList? result = ((Mb4.Artist*)instance) -> relation_list;
                if (result == null) return null;
                return new RelationList.wrap (result);
            }
        }
        public TagList? tag_list {
            owned get {
                unowned Mb4.TagList? result = ((Mb4.Artist*)instance) -> tag_list;
                if (result == null) return null;
                return new TagList.wrap (result);
            }
        }
        public UserTagList? user_tag_list {
            owned get {
                unowned Mb4.UserTagList? result = ((Mb4.Artist*)instance) -> user_tag_list;
                if (result == null) return null;
                return new UserTagList.wrap (result);
            }
        }
        public Rating? rating {
            owned get {
                unowned Mb4.Rating? result = ((Mb4.Artist*)instance) -> rating;
                if (result == null) return null;
                return new Rating.wrap (result);
            }
        }
        public UserRating? user_rating {
            owned get {
                unowned Mb4.UserRating? result = ((Mb4.Artist*)instance) -> user_rating;
                if (result == null) return null;
                return new UserRating.wrap (result);
            }
        }
    }
    public class ArtistCredit : Entity {
        internal ArtistCredit.wrap (Mb4.ArtistCredit* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.ArtistCredit* _obj = (Mb4.ArtistCredit*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public ArtistCredit dup () {
            return new ArtistCredit.wrap (new Mb4.ArtistCredit.copy ((Mb4.ArtistCredit*) instance), false);
        }
        public NameCreditList? name_credit_list {
            owned get {
                unowned Mb4.NameCreditList? result = ((Mb4.ArtistCredit*)instance) -> name_credit_list;
                if (result == null) return null;
                return new NameCreditList.wrap (result);
            }
        }
    }
    public class Attribute : Entity {
        internal Attribute.wrap (Mb4.Attribute* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Attribute* _obj = (Mb4.Attribute*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Attribute dup () {
            return new Attribute.wrap (new Mb4.Attribute.copy ((Mb4.Attribute*) instance), false);
        }
        public string text {
            owned get {
                return ((Mb4.Attribute*)instance) -> text;
            }
        }
    }
    public class CDStub : Entity {
        internal CDStub.wrap (Mb4.CDStub* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.CDStub* _obj = (Mb4.CDStub*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public CDStub dup () {
            return new CDStub.wrap (new Mb4.CDStub.copy ((Mb4.CDStub*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.CDStub*)instance) -> id;
            }
        }
        public string title {
            owned get {
                return ((Mb4.CDStub*)instance) -> title;
            }
        }
        public string artist {
            owned get {
                return ((Mb4.CDStub*)instance) -> artist;
            }
        }
        public string barcode {
            owned get {
                return ((Mb4.CDStub*)instance) -> barcode;
            }
        }
        public string comment {
            owned get {
                return ((Mb4.CDStub*)instance) -> comment;
            }
        }
        public NonMBTrackList? non_mb_track_list {
            owned get {
                unowned Mb4.NonMBTrackList? result = ((Mb4.CDStub*)instance) -> non_mb_track_list;
                if (result == null) return null;
                return new NonMBTrackList.wrap (result);
            }
        }
    }
    public class Collection : Entity {
        internal Collection.wrap (Mb4.Collection* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Collection* _obj = (Mb4.Collection*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Collection dup () {
            return new Collection.wrap (new Mb4.Collection.copy ((Mb4.Collection*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.Collection*)instance) -> id;
            }
        }
        public string name {
            owned get {
                return ((Mb4.Collection*)instance) -> name;
            }
        }
        public string editor {
            owned get {
                return ((Mb4.Collection*)instance) -> editor;
            }
        }
        public ReleaseList? release_list {
            owned get {
                unowned Mb4.ReleaseList? result = ((Mb4.Collection*)instance) -> release_list;
                if (result == null) return null;
                return new ReleaseList.wrap (result);
            }
        }
    }
    public class Disc : Entity {
        internal Disc.wrap (Mb4.Disc* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Disc* _obj = (Mb4.Disc*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Disc dup () {
            return new Disc.wrap (new Mb4.Disc.copy ((Mb4.Disc*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.Disc*)instance) -> id;
            }
        }
        public int sectors {
            owned get {
                return ((Mb4.Disc*)instance) -> sectors;
            }
        }
        public ReleaseList? release_list {
            owned get {
                unowned Mb4.ReleaseList? result = ((Mb4.Disc*)instance) -> release_list;
                if (result == null) return null;
                return new ReleaseList.wrap (result);
            }
        }
    }
    public class FreeDBDisc : Entity {
        internal FreeDBDisc.wrap (Mb4.FreeDBDisc* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.FreeDBDisc* _obj = (Mb4.FreeDBDisc*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public FreeDBDisc dup () {
            return new FreeDBDisc.wrap (new Mb4.FreeDBDisc.copy ((Mb4.FreeDBDisc*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.FreeDBDisc*)instance) -> id;
            }
        }
        public string title {
            owned get {
                return ((Mb4.FreeDBDisc*)instance) -> title;
            }
        }
        public string artist {
            owned get {
                return ((Mb4.FreeDBDisc*)instance) -> artist;
            }
        }
        public string category {
            owned get {
                return ((Mb4.FreeDBDisc*)instance) -> category;
            }
        }
        public string year {
            owned get {
                return ((Mb4.FreeDBDisc*)instance) -> year;
            }
        }
        public NonMBTrackList? non_mb_track_list {
            owned get {
                unowned Mb4.NonMBTrackList? result = ((Mb4.FreeDBDisc*)instance) -> non_mb_track_list;
                if (result == null) return null;
                return new NonMBTrackList.wrap (result);
            }
        }
    }
    public class ISRC : Entity {
        internal ISRC.wrap (Mb4.ISRC* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.ISRC* _obj = (Mb4.ISRC*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public ISRC dup () {
            return new ISRC.wrap (new Mb4.ISRC.copy ((Mb4.ISRC*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.ISRC*)instance) -> id;
            }
        }
        public RecordingList? recording_list {
            owned get {
                unowned Mb4.RecordingList? result = ((Mb4.ISRC*)instance) -> recording_list;
                if (result == null) return null;
                return new RecordingList.wrap (result);
            }
        }
    }
    public class Label : Entity {
        internal Label.wrap (Mb4.Label* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Label* _obj = (Mb4.Label*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Label dup () {
            return new Label.wrap (new Mb4.Label.copy ((Mb4.Label*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.Label*)instance) -> id;
            }
        }
        public string name {
            owned get {
                return ((Mb4.Label*)instance) -> name;
            }
        }
        public string sort_name {
            owned get {
                return ((Mb4.Label*)instance) -> sort_name;
            }
        }
        public int label_code {
            owned get {
                return ((Mb4.Label*)instance) -> label_code;
            }
        }
        public string disambiguation {
            owned get {
                return ((Mb4.Label*)instance) -> disambiguation;
            }
        }
        public string country {
            owned get {
                return ((Mb4.Label*)instance) -> country;
            }
        }
        public Lifespan? lifespan {
            owned get {
                unowned Mb4.Lifespan? result = ((Mb4.Label*)instance) -> lifespan;
                if (result == null) return null;
                return new Lifespan.wrap (result);
            }
        }
        public AliasList? alias_list {
            owned get {
                unowned Mb4.AliasList? result = ((Mb4.Label*)instance) -> alias_list;
                if (result == null) return null;
                return new AliasList.wrap (result);
            }
        }
        public ReleaseList? release_list {
            owned get {
                unowned Mb4.ReleaseList? result = ((Mb4.Label*)instance) -> release_list;
                if (result == null) return null;
                return new ReleaseList.wrap (result);
            }
        }
        public RelationList? relation_list {
            owned get {
                unowned Mb4.RelationList? result = ((Mb4.Label*)instance) -> relation_list;
                if (result == null) return null;
                return new RelationList.wrap (result);
            }
        }
        public TagList? tag_list {
            owned get {
                unowned Mb4.TagList? result = ((Mb4.Label*)instance) -> tag_list;
                if (result == null) return null;
                return new TagList.wrap (result);
            }
        }
        public UserTagList? user_tag_list {
            owned get {
                unowned Mb4.UserTagList? result = ((Mb4.Label*)instance) -> user_tag_list;
                if (result == null) return null;
                return new UserTagList.wrap (result);
            }
        }
        public Rating? rating {
            owned get {
                unowned Mb4.Rating? result = ((Mb4.Label*)instance) -> rating;
                if (result == null) return null;
                return new Rating.wrap (result);
            }
        }
        public UserRating? user_rating {
            owned get {
                unowned Mb4.UserRating? result = ((Mb4.Label*)instance) -> user_rating;
                if (result == null) return null;
                return new UserRating.wrap (result);
            }
        }
    }
    public class LabelInfo : Entity {
        internal LabelInfo.wrap (Mb4.LabelInfo* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.LabelInfo* _obj = (Mb4.LabelInfo*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public LabelInfo dup () {
            return new LabelInfo.wrap (new Mb4.LabelInfo.copy ((Mb4.LabelInfo*) instance), false);
        }
        public string catalog_number {
            owned get {
                return ((Mb4.LabelInfo*)instance) -> catalog_number;
            }
        }
        public Label? label {
            owned get {
                unowned Mb4.Label? result = ((Mb4.LabelInfo*)instance) -> label;
                if (result == null) return null;
                return new Label.wrap (result);
            }
        }
    }
    public class Lifespan : Entity {
        internal Lifespan.wrap (Mb4.Lifespan* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Lifespan* _obj = (Mb4.Lifespan*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Lifespan dup () {
            return new Lifespan.wrap (new Mb4.Lifespan.copy ((Mb4.Lifespan*) instance), false);
        }
        public string begin {
            owned get {
                return ((Mb4.Lifespan*)instance) -> begin;
            }
        }
        public string end {
            owned get {
                return ((Mb4.Lifespan*)instance) -> end;
            }
        }
    }
    public class Medium : Entity {
        internal Medium.wrap (Mb4.Medium* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Medium* _obj = (Mb4.Medium*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Medium dup () {
            return new Medium.wrap (new Mb4.Medium.copy ((Mb4.Medium*) instance), false);
        }
        public string title {
            owned get {
                return ((Mb4.Medium*)instance) -> title;
            }
        }
        public int position {
            owned get {
                return ((Mb4.Medium*)instance) -> position;
            }
        }
        public string format {
            owned get {
                return ((Mb4.Medium*)instance) -> format;
            }
        }
        public DiscList? disc_list {
            owned get {
                unowned Mb4.DiscList? result = ((Mb4.Medium*)instance) -> disc_list;
                if (result == null) return null;
                return new DiscList.wrap (result);
            }
        }
        public TrackList? track_list {
            owned get {
                unowned Mb4.TrackList? result = ((Mb4.Medium*)instance) -> track_list;
                if (result == null) return null;
                return new TrackList.wrap (result);
            }
        }
        public bool contains_disc_id (string disc_id) {
            return ((Mb4.Medium*)instance) -> contains_disc_id (disc_id);
        }
    }
    public class Message : Entity {
        internal Message.wrap (Mb4.Message* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Message* _obj = (Mb4.Message*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Message dup () {
            return new Message.wrap (new Mb4.Message.copy ((Mb4.Message*) instance), false);
        }
        public string text {
            owned get {
                return ((Mb4.Message*)instance) -> text;
            }
        }
    }
    public class Metadata : Entity {
        internal Metadata.wrap (Mb4.Metadata* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Metadata* _obj = (Mb4.Metadata*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Metadata dup () {
            return new Metadata.wrap (new Mb4.Metadata.copy ((Mb4.Metadata*) instance), false);
        }
        public string xmlns {
            owned get {
                return ((Mb4.Metadata*)instance) -> xmlns;
            }
        }
        public string xmlns_ext {
            owned get {
                return ((Mb4.Metadata*)instance) -> xmlns_ext;
            }
        }
        public string generator {
            owned get {
                return ((Mb4.Metadata*)instance) -> generator;
            }
        }
        public string created {
            owned get {
                return ((Mb4.Metadata*)instance) -> created;
            }
        }
        public Artist? artist {
            owned get {
                unowned Mb4.Artist? result = ((Mb4.Metadata*)instance) -> artist;
                if (result == null) return null;
                return new Artist.wrap (result);
            }
        }
        public Release? release {
            owned get {
                unowned Mb4.Release? result = ((Mb4.Metadata*)instance) -> release;
                if (result == null) return null;
                return new Release.wrap (result);
            }
        }
        public ReleaseGroup? release_group {
            owned get {
                unowned Mb4.ReleaseGroup? result = ((Mb4.Metadata*)instance) -> release_group;
                if (result == null) return null;
                return new ReleaseGroup.wrap (result);
            }
        }
        public Recording? recording {
            owned get {
                unowned Mb4.Recording? result = ((Mb4.Metadata*)instance) -> recording;
                if (result == null) return null;
                return new Recording.wrap (result);
            }
        }
        public Label? label {
            owned get {
                unowned Mb4.Label? result = ((Mb4.Metadata*)instance) -> label;
                if (result == null) return null;
                return new Label.wrap (result);
            }
        }
        public Work? work {
            owned get {
                unowned Mb4.Work? result = ((Mb4.Metadata*)instance) -> work;
                if (result == null) return null;
                return new Work.wrap (result);
            }
        }
        public PUID? puid {
            owned get {
                unowned Mb4.PUID? result = ((Mb4.Metadata*)instance) -> puid;
                if (result == null) return null;
                return new PUID.wrap (result);
            }
        }
        public ISRC? isrc {
            owned get {
                unowned Mb4.ISRC? result = ((Mb4.Metadata*)instance) -> isrc;
                if (result == null) return null;
                return new ISRC.wrap (result);
            }
        }
        public Disc? disc {
            owned get {
                unowned Mb4.Disc? result = ((Mb4.Metadata*)instance) -> disc;
                if (result == null) return null;
                return new Disc.wrap (result);
            }
        }
        public LabelInfoList? label_info_list {
            owned get {
                unowned Mb4.LabelInfoList? result = ((Mb4.Metadata*)instance) -> label_info_list;
                if (result == null) return null;
                return new LabelInfoList.wrap (result);
            }
        }
        public Rating? rating {
            owned get {
                unowned Mb4.Rating? result = ((Mb4.Metadata*)instance) -> rating;
                if (result == null) return null;
                return new Rating.wrap (result);
            }
        }
        public UserRating? user_rating {
            owned get {
                unowned Mb4.UserRating? result = ((Mb4.Metadata*)instance) -> user_rating;
                if (result == null) return null;
                return new UserRating.wrap (result);
            }
        }
        public Collection? collection {
            owned get {
                unowned Mb4.Collection? result = ((Mb4.Metadata*)instance) -> collection;
                if (result == null) return null;
                return new Collection.wrap (result);
            }
        }
        public ArtistList? artist_list {
            owned get {
                unowned Mb4.ArtistList? result = ((Mb4.Metadata*)instance) -> artist_list;
                if (result == null) return null;
                return new ArtistList.wrap (result);
            }
        }
        public ReleaseList? release_list {
            owned get {
                unowned Mb4.ReleaseList? result = ((Mb4.Metadata*)instance) -> release_list;
                if (result == null) return null;
                return new ReleaseList.wrap (result);
            }
        }
        public ReleaseGroupList? release_group_list {
            owned get {
                unowned Mb4.ReleaseGroupList? result = ((Mb4.Metadata*)instance) -> release_group_list;
                if (result == null) return null;
                return new ReleaseGroupList.wrap (result);
            }
        }
        public RecordingList? recording_list {
            owned get {
                unowned Mb4.RecordingList? result = ((Mb4.Metadata*)instance) -> recording_list;
                if (result == null) return null;
                return new RecordingList.wrap (result);
            }
        }
        public LabelList? label_list {
            owned get {
                unowned Mb4.LabelList? result = ((Mb4.Metadata*)instance) -> label_list;
                if (result == null) return null;
                return new LabelList.wrap (result);
            }
        }
        public WorkList? work_list {
            owned get {
                unowned Mb4.WorkList? result = ((Mb4.Metadata*)instance) -> work_list;
                if (result == null) return null;
                return new WorkList.wrap (result);
            }
        }
        public ISRCList? isrc_list {
            owned get {
                unowned Mb4.ISRCList? result = ((Mb4.Metadata*)instance) -> isrc_list;
                if (result == null) return null;
                return new ISRCList.wrap (result);
            }
        }
        public AnnotationList? annotation_list {
            owned get {
                unowned Mb4.AnnotationList? result = ((Mb4.Metadata*)instance) -> annotation_list;
                if (result == null) return null;
                return new AnnotationList.wrap (result);
            }
        }
        public CDStubList? cd_stub_list {
            owned get {
                unowned Mb4.CDStubList? result = ((Mb4.Metadata*)instance) -> cd_stub_list;
                if (result == null) return null;
                return new CDStubList.wrap (result);
            }
        }
        public FreeDBDiscList? free_db_disc_list {
            owned get {
                unowned Mb4.FreeDBDiscList? result = ((Mb4.Metadata*)instance) -> free_db_disc_list;
                if (result == null) return null;
                return new FreeDBDiscList.wrap (result);
            }
        }
        public TagList? tag_list {
            owned get {
                unowned Mb4.TagList? result = ((Mb4.Metadata*)instance) -> tag_list;
                if (result == null) return null;
                return new TagList.wrap (result);
            }
        }
        public UserTagList? user_tag_list {
            owned get {
                unowned Mb4.UserTagList? result = ((Mb4.Metadata*)instance) -> user_tag_list;
                if (result == null) return null;
                return new UserTagList.wrap (result);
            }
        }
        public CollectionList? collection_list {
            owned get {
                unowned Mb4.CollectionList? result = ((Mb4.Metadata*)instance) -> collection_list;
                if (result == null) return null;
                return new CollectionList.wrap (result);
            }
        }
        public CDStub? cd_stub {
            owned get {
                unowned Mb4.CDStub? result = ((Mb4.Metadata*)instance) -> cd_stub;
                if (result == null) return null;
                return new CDStub.wrap (result);
            }
        }
        public Message? message {
            owned get {
                unowned Mb4.Message? result = ((Mb4.Metadata*)instance) -> message;
                if (result == null) return null;
                return new Message.wrap (result);
            }
        }
    }
    public class NameCredit : Entity {
        internal NameCredit.wrap (Mb4.NameCredit* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.NameCredit* _obj = (Mb4.NameCredit*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public NameCredit dup () {
            return new NameCredit.wrap (new Mb4.NameCredit.copy ((Mb4.NameCredit*) instance), false);
        }
        public string join_phrase {
            owned get {
                return ((Mb4.NameCredit*)instance) -> join_phrase;
            }
        }
        public string name {
            owned get {
                return ((Mb4.NameCredit*)instance) -> name;
            }
        }
        public Artist? artist {
            owned get {
                unowned Mb4.Artist? result = ((Mb4.NameCredit*)instance) -> artist;
                if (result == null) return null;
                return new Artist.wrap (result);
            }
        }
    }
    public class NonMBTrack : Entity {
        internal NonMBTrack.wrap (Mb4.NonMBTrack* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.NonMBTrack* _obj = (Mb4.NonMBTrack*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public NonMBTrack dup () {
            return new NonMBTrack.wrap (new Mb4.NonMBTrack.copy ((Mb4.NonMBTrack*) instance), false);
        }
        public string title {
            owned get {
                return ((Mb4.NonMBTrack*)instance) -> title;
            }
        }
        public string artist {
            owned get {
                return ((Mb4.NonMBTrack*)instance) -> artist;
            }
        }
        public int length {
            owned get {
                return ((Mb4.NonMBTrack*)instance) -> length;
            }
        }
    }
    public class PUID : Entity {
        internal PUID.wrap (Mb4.PUID* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.PUID* _obj = (Mb4.PUID*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public PUID dup () {
            return new PUID.wrap (new Mb4.PUID.copy ((Mb4.PUID*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.PUID*)instance) -> id;
            }
        }
        public RecordingList? recording_list {
            owned get {
                unowned Mb4.RecordingList? result = ((Mb4.PUID*)instance) -> recording_list;
                if (result == null) return null;
                return new RecordingList.wrap (result);
            }
        }
    }
    public class Query {
        public int last_http_code {
            owned get {
                return ((Mb4.Query*)instance) -> last_http_code;
            }
        }
        public string last_error_message {
            owned get {
                return ((Mb4.Query*)instance) -> last_error_message;
            }
        }
        Mb4.Query * instance;
        public Query (string user_agent, string? server = null, int port = 0) {
        	instance = new Mb4.Query (user_agent, server, port);
        }
        ~Query () {
        	delete instance;
        }
        
        public string username { set { instance -> username = value; } }
        public string password { set { instance -> password = value; } }
        public string proxy_host { set { instance -> proxy_host = value; } }
        public int proxy_port { set { instance -> proxy_port = value; } }
        public string proxy_username { set { instance -> proxy_username = value; } }
        public string proxy_password { set { instance -> proxy_password = value; } }
        
        public ReleaseList lookup_disc_id (string disc_id) {
        	return new ReleaseList.wrap (instance -> lookup_disc_id (disc_id), false);
        }
        
        public Release lookup_release (string release) {
        	return new Release.wrap (instance -> lookup_release (release), false);
        }
        
        public Metadata query (string entity, string? id, string? resource, ...) {
            string[] param_names = new string[0];
            string[] param_values = new string[0];
            var l = va_list();
            while (true) {
                string? name = l.arg();
                if (name == null) {
                    break;
                }
                string val = l.arg();
                param_names += name;
                param_values += val;
            }
            return new Metadata.wrap (instance -> query_array(entity, id, resource, 
        									param_names.length, param_names, param_values), false);
        }
        
        public Mb4.Query.Result last_result {
        	get { return instance -> last_result; }
        }
    }
    public class Rating : Entity {
        internal Rating.wrap (Mb4.Rating* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Rating* _obj = (Mb4.Rating*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Rating dup () {
            return new Rating.wrap (new Mb4.Rating.copy ((Mb4.Rating*) instance), false);
        }
        public int votes_count {
            owned get {
                return ((Mb4.Rating*)instance) -> votes_count;
            }
        }
        public double rating {
            owned get {
                return ((Mb4.Rating*)instance) -> rating;
            }
        }
    }
    public class Recording : Entity {
        internal Recording.wrap (Mb4.Recording* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Recording* _obj = (Mb4.Recording*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Recording dup () {
            return new Recording.wrap (new Mb4.Recording.copy ((Mb4.Recording*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.Recording*)instance) -> id;
            }
        }
        public string title {
            owned get {
                return ((Mb4.Recording*)instance) -> title;
            }
        }
        public int length {
            owned get {
                return ((Mb4.Recording*)instance) -> length;
            }
        }
        public string disambiguation {
            owned get {
                return ((Mb4.Recording*)instance) -> disambiguation;
            }
        }
        public ArtistCredit? artist_credit {
            owned get {
                unowned Mb4.ArtistCredit? result = ((Mb4.Recording*)instance) -> artist_credit;
                if (result == null) return null;
                return new ArtistCredit.wrap (result);
            }
        }
        public ReleaseList? release_list {
            owned get {
                unowned Mb4.ReleaseList? result = ((Mb4.Recording*)instance) -> release_list;
                if (result == null) return null;
                return new ReleaseList.wrap (result);
            }
        }
        public PUIDList? puid_list {
            owned get {
                unowned Mb4.PUIDList? result = ((Mb4.Recording*)instance) -> puid_list;
                if (result == null) return null;
                return new PUIDList.wrap (result);
            }
        }
        public ISRCList? isrc_list {
            owned get {
                unowned Mb4.ISRCList? result = ((Mb4.Recording*)instance) -> isrc_list;
                if (result == null) return null;
                return new ISRCList.wrap (result);
            }
        }
        public RelationList? relation_list {
            owned get {
                unowned Mb4.RelationList? result = ((Mb4.Recording*)instance) -> relation_list;
                if (result == null) return null;
                return new RelationList.wrap (result);
            }
        }
        public TagList? tag_list {
            owned get {
                unowned Mb4.TagList? result = ((Mb4.Recording*)instance) -> tag_list;
                if (result == null) return null;
                return new TagList.wrap (result);
            }
        }
        public UserTagList? user_tag_list {
            owned get {
                unowned Mb4.UserTagList? result = ((Mb4.Recording*)instance) -> user_tag_list;
                if (result == null) return null;
                return new UserTagList.wrap (result);
            }
        }
        public Rating? rating {
            owned get {
                unowned Mb4.Rating? result = ((Mb4.Recording*)instance) -> rating;
                if (result == null) return null;
                return new Rating.wrap (result);
            }
        }
        public UserRating? user_rating {
            owned get {
                unowned Mb4.UserRating? result = ((Mb4.Recording*)instance) -> user_rating;
                if (result == null) return null;
                return new UserRating.wrap (result);
            }
        }
    }
    public class Relation : Entity {
        internal Relation.wrap (Mb4.Relation* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Relation* _obj = (Mb4.Relation*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Relation dup () {
            return new Relation.wrap (new Mb4.Relation.copy ((Mb4.Relation*) instance), false);
        }
        public string target {
            owned get {
                return ((Mb4.Relation*)instance) -> target;
            }
        }
        public string direction {
            owned get {
                return ((Mb4.Relation*)instance) -> direction;
            }
        }
        public AttributeList? attribute_list {
            owned get {
                unowned Mb4.AttributeList? result = ((Mb4.Relation*)instance) -> attribute_list;
                if (result == null) return null;
                return new AttributeList.wrap (result);
            }
        }
        public string begin {
            owned get {
                return ((Mb4.Relation*)instance) -> begin;
            }
        }
        public string end {
            owned get {
                return ((Mb4.Relation*)instance) -> end;
            }
        }
        public Artist? artist {
            owned get {
                unowned Mb4.Artist? result = ((Mb4.Relation*)instance) -> artist;
                if (result == null) return null;
                return new Artist.wrap (result);
            }
        }
        public Release? release {
            owned get {
                unowned Mb4.Release? result = ((Mb4.Relation*)instance) -> release;
                if (result == null) return null;
                return new Release.wrap (result);
            }
        }
        public ReleaseGroup? release_group {
            owned get {
                unowned Mb4.ReleaseGroup? result = ((Mb4.Relation*)instance) -> release_group;
                if (result == null) return null;
                return new ReleaseGroup.wrap (result);
            }
        }
        public Recording? recording {
            owned get {
                unowned Mb4.Recording? result = ((Mb4.Relation*)instance) -> recording;
                if (result == null) return null;
                return new Recording.wrap (result);
            }
        }
        public Label? label {
            owned get {
                unowned Mb4.Label? result = ((Mb4.Relation*)instance) -> label;
                if (result == null) return null;
                return new Label.wrap (result);
            }
        }
        public Work? work {
            owned get {
                unowned Mb4.Work? result = ((Mb4.Relation*)instance) -> work;
                if (result == null) return null;
                return new Work.wrap (result);
            }
        }
    }
    public class Release : Entity {
        internal Release.wrap (Mb4.Release* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Release* _obj = (Mb4.Release*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Release dup () {
            return new Release.wrap (new Mb4.Release.copy ((Mb4.Release*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.Release*)instance) -> id;
            }
        }
        public string title {
            owned get {
                return ((Mb4.Release*)instance) -> title;
            }
        }
        public string status {
            owned get {
                return ((Mb4.Release*)instance) -> status;
            }
        }
        public string quality {
            owned get {
                return ((Mb4.Release*)instance) -> quality;
            }
        }
        public string disambiguation {
            owned get {
                return ((Mb4.Release*)instance) -> disambiguation;
            }
        }
        public string packaging {
            owned get {
                return ((Mb4.Release*)instance) -> packaging;
            }
        }
        public TextRepresentation? text_representation {
            owned get {
                unowned Mb4.TextRepresentation? result = ((Mb4.Release*)instance) -> text_representation;
                if (result == null) return null;
                return new TextRepresentation.wrap (result);
            }
        }
        public ArtistCredit? artist_credit {
            owned get {
                unowned Mb4.ArtistCredit? result = ((Mb4.Release*)instance) -> artist_credit;
                if (result == null) return null;
                return new ArtistCredit.wrap (result);
            }
        }
        public ReleaseGroup? release_group {
            owned get {
                unowned Mb4.ReleaseGroup? result = ((Mb4.Release*)instance) -> release_group;
                if (result == null) return null;
                return new ReleaseGroup.wrap (result);
            }
        }
        public string date {
            owned get {
                return ((Mb4.Release*)instance) -> date;
            }
        }
        public string country {
            owned get {
                return ((Mb4.Release*)instance) -> country;
            }
        }
        public string barcode {
            owned get {
                return ((Mb4.Release*)instance) -> barcode;
            }
        }
        public string asin {
            owned get {
                return ((Mb4.Release*)instance) -> asin;
            }
        }
        public LabelInfoList? label_info_list {
            owned get {
                unowned Mb4.LabelInfoList? result = ((Mb4.Release*)instance) -> label_info_list;
                if (result == null) return null;
                return new LabelInfoList.wrap (result);
            }
        }
        public MediumList? medium_list {
            owned get {
                unowned Mb4.MediumList? result = ((Mb4.Release*)instance) -> medium_list;
                if (result == null) return null;
                return new MediumList.wrap (result);
            }
        }
        public RelationList? relation_list {
            owned get {
                unowned Mb4.RelationList? result = ((Mb4.Release*)instance) -> relation_list;
                if (result == null) return null;
                return new RelationList.wrap (result);
            }
        }
        public MediumList media_matching_disc_id (string disc_id) {
            return new MediumList.wrap (((Mb4.Release*)instance) -> media_matching_disc_id (disc_id), false);
        }
    }
    public class ReleaseGroup : Entity {
        internal ReleaseGroup.wrap (Mb4.ReleaseGroup* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.ReleaseGroup* _obj = (Mb4.ReleaseGroup*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public ReleaseGroup dup () {
            return new ReleaseGroup.wrap (new Mb4.ReleaseGroup.copy ((Mb4.ReleaseGroup*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.ReleaseGroup*)instance) -> id;
            }
        }
        public string title {
            owned get {
                return ((Mb4.ReleaseGroup*)instance) -> title;
            }
        }
        public string disambiguation {
            owned get {
                return ((Mb4.ReleaseGroup*)instance) -> disambiguation;
            }
        }
        public string first_release_date {
            owned get {
                return ((Mb4.ReleaseGroup*)instance) -> first_release_date;
            }
        }
        public ArtistCredit? artist_credit {
            owned get {
                unowned Mb4.ArtistCredit? result = ((Mb4.ReleaseGroup*)instance) -> artist_credit;
                if (result == null) return null;
                return new ArtistCredit.wrap (result);
            }
        }
        public ReleaseList? release_list {
            owned get {
                unowned Mb4.ReleaseList? result = ((Mb4.ReleaseGroup*)instance) -> release_list;
                if (result == null) return null;
                return new ReleaseList.wrap (result);
            }
        }
        public RelationList? relation_list {
            owned get {
                unowned Mb4.RelationList? result = ((Mb4.ReleaseGroup*)instance) -> relation_list;
                if (result == null) return null;
                return new RelationList.wrap (result);
            }
        }
        public TagList? tag_list {
            owned get {
                unowned Mb4.TagList? result = ((Mb4.ReleaseGroup*)instance) -> tag_list;
                if (result == null) return null;
                return new TagList.wrap (result);
            }
        }
        public UserTagList? user_tag_list {
            owned get {
                unowned Mb4.UserTagList? result = ((Mb4.ReleaseGroup*)instance) -> user_tag_list;
                if (result == null) return null;
                return new UserTagList.wrap (result);
            }
        }
        public Rating? rating {
            owned get {
                unowned Mb4.Rating? result = ((Mb4.ReleaseGroup*)instance) -> rating;
                if (result == null) return null;
                return new Rating.wrap (result);
            }
        }
        public UserRating? user_rating {
            owned get {
                unowned Mb4.UserRating? result = ((Mb4.ReleaseGroup*)instance) -> user_rating;
                if (result == null) return null;
                return new UserRating.wrap (result);
            }
        }
    }
    public class Tag : Entity {
        internal Tag.wrap (Mb4.Tag* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Tag* _obj = (Mb4.Tag*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Tag dup () {
            return new Tag.wrap (new Mb4.Tag.copy ((Mb4.Tag*) instance), false);
        }
        public int count {
            owned get {
                return ((Mb4.Tag*)instance) -> count;
            }
        }
        public string name {
            owned get {
                return ((Mb4.Tag*)instance) -> name;
            }
        }
    }
    public class TextRepresentation : Entity {
        internal TextRepresentation.wrap (Mb4.TextRepresentation* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.TextRepresentation* _obj = (Mb4.TextRepresentation*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public TextRepresentation dup () {
            return new TextRepresentation.wrap (new Mb4.TextRepresentation.copy ((Mb4.TextRepresentation*) instance), false);
        }
        public string language {
            owned get {
                return ((Mb4.TextRepresentation*)instance) -> language;
            }
        }
        public string script {
            owned get {
                return ((Mb4.TextRepresentation*)instance) -> script;
            }
        }
    }
    public class Track : Entity {
        internal Track.wrap (Mb4.Track* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Track* _obj = (Mb4.Track*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Track dup () {
            return new Track.wrap (new Mb4.Track.copy ((Mb4.Track*) instance), false);
        }
        public int position {
            owned get {
                return ((Mb4.Track*)instance) -> position;
            }
        }
        public string title {
            owned get {
                return ((Mb4.Track*)instance) -> title;
            }
        }
        public Recording? recording {
            owned get {
                unowned Mb4.Recording? result = ((Mb4.Track*)instance) -> recording;
                if (result == null) return null;
                return new Recording.wrap (result);
            }
        }
        public int length {
            owned get {
                return ((Mb4.Track*)instance) -> length;
            }
        }
        public ArtistCredit? artist_credit {
            owned get {
                unowned Mb4.ArtistCredit? result = ((Mb4.Track*)instance) -> artist_credit;
                if (result == null) return null;
                return new ArtistCredit.wrap (result);
            }
        }
    }
    public class UserRating : Entity {
        internal UserRating.wrap (Mb4.UserRating* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.UserRating* _obj = (Mb4.UserRating*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public UserRating dup () {
            return new UserRating.wrap (new Mb4.UserRating.copy ((Mb4.UserRating*) instance), false);
        }
        public int user_rating {
            owned get {
                return ((Mb4.UserRating*)instance) -> user_rating;
            }
        }
    }
    public class UserTag : Entity {
        internal UserTag.wrap (Mb4.UserTag* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.UserTag* _obj = (Mb4.UserTag*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public UserTag dup () {
            return new UserTag.wrap (new Mb4.UserTag.copy ((Mb4.UserTag*) instance), false);
        }
        public string name {
            owned get {
                return ((Mb4.UserTag*)instance) -> name;
            }
        }
    }
    public class Work : Entity {
        internal Work.wrap (Mb4.Work* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => {
                Mb4.Work* _obj = (Mb4.Work*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
        }
        public Work dup () {
            return new Work.wrap (new Mb4.Work.copy ((Mb4.Work*) instance), false);
        }
        public string id {
            owned get {
                return ((Mb4.Work*)instance) -> id;
            }
        }
        public string title {
            owned get {
                return ((Mb4.Work*)instance) -> title;
            }
        }
        public ArtistCredit? artist_credit {
            owned get {
                unowned Mb4.ArtistCredit? result = ((Mb4.Work*)instance) -> artist_credit;
                if (result == null) return null;
                return new ArtistCredit.wrap (result);
            }
        }
        public string iswc {
            owned get {
                return ((Mb4.Work*)instance) -> iswc;
            }
        }
        public string disambiguation {
            owned get {
                return ((Mb4.Work*)instance) -> disambiguation;
            }
        }
        public AliasList? alias_list {
            owned get {
                unowned Mb4.AliasList? result = ((Mb4.Work*)instance) -> alias_list;
                if (result == null) return null;
                return new AliasList.wrap (result);
            }
        }
        public RelationList? relation_list {
            owned get {
                unowned Mb4.RelationList? result = ((Mb4.Work*)instance) -> relation_list;
                if (result == null) return null;
                return new RelationList.wrap (result);
            }
        }
        public TagList? tag_list {
            owned get {
                unowned Mb4.TagList? result = ((Mb4.Work*)instance) -> tag_list;
                if (result == null) return null;
                return new TagList.wrap (result);
            }
        }
        public UserTagList? user_tag_list {
            owned get {
                unowned Mb4.UserTagList? result = ((Mb4.Work*)instance) -> user_tag_list;
                if (result == null) return null;
                return new UserTagList.wrap (result);
            }
        }
        public Rating? rating {
            owned get {
                unowned Mb4.Rating? result = ((Mb4.Work*)instance) -> rating;
                if (result == null) return null;
                return new Rating.wrap (result);
            }
        }
        public UserRating? user_rating {
            owned get {
                unowned Mb4.UserRating? result = ((Mb4.Work*)instance) -> user_rating;
                if (result == null) return null;
                return new UserRating.wrap (result);
            }
        }
    }
    public class AliasList : Entity {
        Alias[] lst;
        internal AliasList.wrap (Mb4.AliasList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.AliasList* _obj = (Mb4.AliasList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Alias[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Alias.wrap (instance -> get(i));
            }
        }
        public AliasList dup () {
            return new AliasList.wrap (new Mb4.AliasList.copy ((Mb4.AliasList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Alias get (int item) { return lst[item]; }
    }
    public class AnnotationList : Entity {
        Annotation[] lst;
        internal AnnotationList.wrap (Mb4.AnnotationList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.AnnotationList* _obj = (Mb4.AnnotationList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Annotation[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Annotation.wrap (instance -> get(i));
            }
        }
        public AnnotationList dup () {
            return new AnnotationList.wrap (new Mb4.AnnotationList.copy ((Mb4.AnnotationList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Annotation get (int item) { return lst[item]; }
    }
    public class ArtistList : Entity {
        Artist[] lst;
        internal ArtistList.wrap (Mb4.ArtistList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.ArtistList* _obj = (Mb4.ArtistList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Artist[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Artist.wrap (instance -> get(i));
            }
        }
        public ArtistList dup () {
            return new ArtistList.wrap (new Mb4.ArtistList.copy ((Mb4.ArtistList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Artist get (int item) { return lst[item]; }
    }
    public class AttributeList : Entity {
        Attribute[] lst;
        internal AttributeList.wrap (Mb4.AttributeList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.AttributeList* _obj = (Mb4.AttributeList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Attribute[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Attribute.wrap (instance -> get(i));
            }
        }
        public AttributeList dup () {
            return new AttributeList.wrap (new Mb4.AttributeList.copy ((Mb4.AttributeList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Attribute get (int item) { return lst[item]; }
    }
    public class CDStubList : Entity {
        CDStub[] lst;
        internal CDStubList.wrap (Mb4.CDStubList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.CDStubList* _obj = (Mb4.CDStubList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new CDStub[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new CDStub.wrap (instance -> get(i));
            }
        }
        public CDStubList dup () {
            return new CDStubList.wrap (new Mb4.CDStubList.copy ((Mb4.CDStubList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public CDStub get (int item) { return lst[item]; }
    }
    public class CollectionList : Entity {
        Collection[] lst;
        internal CollectionList.wrap (Mb4.CollectionList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.CollectionList* _obj = (Mb4.CollectionList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Collection[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Collection.wrap (instance -> get(i));
            }
        }
        public CollectionList dup () {
            return new CollectionList.wrap (new Mb4.CollectionList.copy ((Mb4.CollectionList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Collection get (int item) { return lst[item]; }
    }
    public class DiscList : Entity {
        Disc[] lst;
        internal DiscList.wrap (Mb4.DiscList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.DiscList* _obj = (Mb4.DiscList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Disc[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Disc.wrap (instance -> get(i));
            }
        }
        public DiscList dup () {
            return new DiscList.wrap (new Mb4.DiscList.copy ((Mb4.DiscList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Disc get (int item) { return lst[item]; }
    }
    public class FreeDBDiscList : Entity {
        FreeDBDisc[] lst;
        internal FreeDBDiscList.wrap (Mb4.FreeDBDiscList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.FreeDBDiscList* _obj = (Mb4.FreeDBDiscList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new FreeDBDisc[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new FreeDBDisc.wrap (instance -> get(i));
            }
        }
        public FreeDBDiscList dup () {
            return new FreeDBDiscList.wrap (new Mb4.FreeDBDiscList.copy ((Mb4.FreeDBDiscList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public FreeDBDisc get (int item) { return lst[item]; }
    }
    public class ISRCList : Entity {
        ISRC[] lst;
        internal ISRCList.wrap (Mb4.ISRCList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.ISRCList* _obj = (Mb4.ISRCList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new ISRC[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new ISRC.wrap (instance -> get(i));
            }
        }
        public ISRCList dup () {
            return new ISRCList.wrap (new Mb4.ISRCList.copy ((Mb4.ISRCList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public ISRC get (int item) { return lst[item]; }
    }
    public class LabelList : Entity {
        Label[] lst;
        internal LabelList.wrap (Mb4.LabelList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.LabelList* _obj = (Mb4.LabelList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Label[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Label.wrap (instance -> get(i));
            }
        }
        public LabelList dup () {
            return new LabelList.wrap (new Mb4.LabelList.copy ((Mb4.LabelList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Label get (int item) { return lst[item]; }
    }
    public class LabelInfoList : Entity {
        LabelInfo[] lst;
        internal LabelInfoList.wrap (Mb4.LabelInfoList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.LabelInfoList* _obj = (Mb4.LabelInfoList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new LabelInfo[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new LabelInfo.wrap (instance -> get(i));
            }
        }
        public LabelInfoList dup () {
            return new LabelInfoList.wrap (new Mb4.LabelInfoList.copy ((Mb4.LabelInfoList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public LabelInfo get (int item) { return lst[item]; }
    }
    public class MediumList : Entity {
        Medium[] lst;
        internal MediumList.wrap (Mb4.MediumList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.MediumList* _obj = (Mb4.MediumList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Medium[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Medium.wrap (instance -> get(i));
            }
        }
        public MediumList dup () {
            return new MediumList.wrap (new Mb4.MediumList.copy ((Mb4.MediumList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Medium get (int item) { return lst[item]; }
        public int track_count {
            owned get {
                return ((Mb4.MediumList*)instance) -> track_count;
            }
        }
    }
    public class NameCreditList : Entity {
        NameCredit[] lst;
        internal NameCreditList.wrap (Mb4.NameCreditList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.NameCreditList* _obj = (Mb4.NameCreditList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new NameCredit[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new NameCredit.wrap (instance -> get(i));
            }
        }
        public NameCreditList dup () {
            return new NameCreditList.wrap (new Mb4.NameCreditList.copy ((Mb4.NameCreditList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public NameCredit get (int item) { return lst[item]; }
    }
    public class NonMBTrackList : Entity {
        NonMBTrack[] lst;
        internal NonMBTrackList.wrap (Mb4.NonMBTrackList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.NonMBTrackList* _obj = (Mb4.NonMBTrackList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new NonMBTrack[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new NonMBTrack.wrap (instance -> get(i));
            }
        }
        public NonMBTrackList dup () {
            return new NonMBTrackList.wrap (new Mb4.NonMBTrackList.copy ((Mb4.NonMBTrackList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public NonMBTrack get (int item) { return lst[item]; }
    }
    public class PUIDList : Entity {
        PUID[] lst;
        internal PUIDList.wrap (Mb4.PUIDList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.PUIDList* _obj = (Mb4.PUIDList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new PUID[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new PUID.wrap (instance -> get(i));
            }
        }
        public PUIDList dup () {
            return new PUIDList.wrap (new Mb4.PUIDList.copy ((Mb4.PUIDList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public PUID get (int item) { return lst[item]; }
    }
    public class RecordingList : Entity {
        Recording[] lst;
        internal RecordingList.wrap (Mb4.RecordingList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.RecordingList* _obj = (Mb4.RecordingList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Recording[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Recording.wrap (instance -> get(i));
            }
        }
        public RecordingList dup () {
            return new RecordingList.wrap (new Mb4.RecordingList.copy ((Mb4.RecordingList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Recording get (int item) { return lst[item]; }
    }
    public class RelationList : Entity {
        Relation[] lst;
        internal RelationList.wrap (Mb4.RelationList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.RelationList* _obj = (Mb4.RelationList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Relation[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Relation.wrap (instance -> get(i));
            }
        }
        public RelationList dup () {
            return new RelationList.wrap (new Mb4.RelationList.copy ((Mb4.RelationList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Relation get (int item) { return lst[item]; }
        public string target_type {
            owned get {
                return ((Mb4.RelationList*)instance) -> target_type;
            }
        }
    }
    public class ReleaseList : Entity {
        Release[] lst;
        internal ReleaseList.wrap (Mb4.ReleaseList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.ReleaseList* _obj = (Mb4.ReleaseList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Release[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Release.wrap (instance -> get(i));
            }
        }
        public ReleaseList dup () {
            return new ReleaseList.wrap (new Mb4.ReleaseList.copy ((Mb4.ReleaseList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Release get (int item) { return lst[item]; }
    }
    public class ReleaseGroupList : Entity {
        ReleaseGroup[] lst;
        internal ReleaseGroupList.wrap (Mb4.ReleaseGroupList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.ReleaseGroupList* _obj = (Mb4.ReleaseGroupList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new ReleaseGroup[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new ReleaseGroup.wrap (instance -> get(i));
            }
        }
        public ReleaseGroupList dup () {
            return new ReleaseGroupList.wrap (new Mb4.ReleaseGroupList.copy ((Mb4.ReleaseGroupList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public ReleaseGroup get (int item) { return lst[item]; }
    }
    public class TagList : Entity {
        Tag[] lst;
        internal TagList.wrap (Mb4.TagList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.TagList* _obj = (Mb4.TagList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Tag[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Tag.wrap (instance -> get(i));
            }
        }
        public TagList dup () {
            return new TagList.wrap (new Mb4.TagList.copy ((Mb4.TagList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Tag get (int item) { return lst[item]; }
    }
    public class TrackList : Entity {
        Track[] lst;
        internal TrackList.wrap (Mb4.TrackList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.TrackList* _obj = (Mb4.TrackList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Track[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Track.wrap (instance -> get(i));
            }
        }
        public TrackList dup () {
            return new TrackList.wrap (new Mb4.TrackList.copy ((Mb4.TrackList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Track get (int item) { return lst[item]; }
    }
    public class UserTagList : Entity {
        UserTag[] lst;
        internal UserTagList.wrap (Mb4.UserTagList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.UserTagList* _obj = (Mb4.UserTagList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new UserTag[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new UserTag.wrap (instance -> get(i));
            }
        }
        public UserTagList dup () {
            return new UserTagList.wrap (new Mb4.UserTagList.copy ((Mb4.UserTagList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public UserTag get (int item) { return lst[item]; }
    }
    public class WorkList : Entity {
        Work[] lst;
        internal WorkList.wrap (Mb4.WorkList* instance, bool has_parent=true) {
            Entity.DeleteFunc func = (obj) => { 
                Mb4.WorkList* _obj = (Mb4.WorkList*)obj;
                if (_obj != null) delete _obj;
            };
            base.wrap_helper (instance, has_parent ? null : func);
            int size = instance -> size;
            lst = new Work[size];
            for (var i = 0; i < size; ++i) {
                lst[i] = new Work.wrap (instance -> get(i));
            }
        }
        public WorkList dup () {
            return new WorkList.wrap (new Mb4.WorkList.copy ((Mb4.WorkList*) instance), false);
        }
        public int size { get { return lst.length; } }
        public Work get (int item) { return lst[item]; }
    }
}
